
2.birth candel
#include<bits/stdc++.h>
using namespace std;

int main(){

    int a,n,height = -1,res = 0;
    vector<int> ar;

    cin >> n;
    for(int i = 0; i < n; i++){
        cin >> a;
        if(a >= height)ar.push_back(height = a);
    }

    for(int i = 0; i < ar.size(); i++){
        if(ar[i] == height)res++;
    }
    cout << res << endl;
}



3...min-max

#include <bits/stdc++.h>
using namespace std;
int main() {
    vector<long int>ar;
    for(int i = 0; i < 5; i++){
        int a;cin >> a;
        ar.push_back(a);
    }
    sort(ar.begin(),ar.end());
    long int mx = 0,min = 0;
    for(int i = 1; i <= 4; i++)mx+=ar[i];
    for(int i = 0; i < 4; i++)min+=ar[i];
    cout << min << " " << mx << endl;
    return 0;
}






4...digonal


#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;
int main() {
    int n,ar[102][102],d1 = 0,d2 = 0;
    cin >> n;
    for(int i = 0; i < n; i++){
        for(int j = 0; j < n; j++){
            cin >> ar[i][j];
            if(i==j)d1+=ar[i][j];
            if(i+j==n-1)d2+=ar[i][j];
        }
    }
    cout << abs(d1-d2) << endl;
    return 0;
}



5.....plus-minus


#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;
int main() {
    float n,cnt = 0,a,p = 0,ne = 0,z = 0;
    cin >> n;
    for(int i = 0; i < n; i++){
        cin >> a;
        if(a > 0 )p++;
        else if(a < 0)ne++;
        else if(a == 0)z++; 
    }
    printf("%.4f\n",p/n);
    printf("%.4f\n",ne/n);
    printf("%.4f\n",z/n);

    return 0;
}




6...compare the triplets



#include <bits/stdc++.h>
using namespace std;
int main() {
 
    int a[3],b[3],aPoint = 0,bPoint = 0;
 
    cin >> a[0] >> a[1] >> a[2];
    cin >> b[0] >> b[1] >> b[2];
 
    for(int i = 0; i < 3; i++){
        if(a[i] > b[i])aPoint++;
        else if(a[i] < b[i])bPoint++;
    }
    cout << aPoint << " " << bPoint << endl;
    return 0;
}





7....2d array ds

#include<bits/stdc++.h>
using namespace std;
int main(){

    int ar[10][10],maxSum = -36985247;
    for(int i = 0; i < 6; i++){
        for(int j = 0; j < 6; j++)cin >> ar[i][j];
    }

    for(int i = 0; i < 6; i++){
        for(int j = 0; j < 6; j++){
            if(j+2 < 6 && i+2 < 6 ){
                int sum = ar[i][j] + ar[i][j+1] + ar[i][j+2] + ar[i+1][j+1] + ar[i+2][j] + ar[i+2][j+1] + ar[i+2][j+2];
                if(sum > maxSum)maxSum = sum;
            }
        }
    }
    cout << maxSum << endl;
    return 0;
}


8....the hurdle race


#include<bits/stdc++.h>
using namespace std;
int main(){

    int n,k,a,h = 0;

    cin >> n >> k;
    for(int i = 0; i < n; i++){
        cin >> a;
        if(a > h)h = a;
    }
    (k >= h) ? cout << 0 << endl : cout << h-k << endl;

    return 0;
}






9...viral advertising


#include <bits/stdc++.h>
using namespace std;
int main() {
    int n;
    cin >> n;
    int result = 2,like = 2;
    for(int i = 2; i <= n; i++){
        like*=3;
        like = like/2;
        result+=like;
    }
    cout << result << endl;
    return 0;
}





10...service lane




#include <bits/stdc++.h>
using namespace std;
int main(){
    int n;
    int t;
    cin >> n >> t;
    vector<int> width(n);
    for(int width_i = 0;width_i < n;width_i++){
        cin >> width[width_i];
    }
    for(int a0 = 0; a0 < t; a0++){
        int i;
        int j;
        cin >> i >> j;
        int pass = INT_MAX;
        for(int l = i; l  <= j; l++){
            if(width[l] <= pass)pass = width[l];
        }
        cout << pass << endl;
    }
    return 0;
}





11...left rotation





#include <bits/stdc++.h>
using namespace std;
int main() {
    int n,d,ar[100002];
    cin >> n >> d;
    for(int i = 0; i < n; i++)cin >> ar[(n-d+i)%n];
    for(int i = 0; i < n; i++)cout << ar[i] << " ";
    cout << endl;
    return 0;
}




12..climbingg


#include <math.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>
#include <limits.h>
#include <stdbool.h>

int main() {
    int n,i,j,t,scores_i,k;
    scanf("%i", &n);
  
    int *scores = malloc(sizeof(int) * n);
    scanf("%i",&scores[0]);
    for (scores_i = 1,k=1; k < n;k++ )
    {
       scanf("%i",&t);
       if(t !=scores[scores_i-1])
       {
           scores[scores_i]=t; //scoring only distinct scores so that index gives the rank
           scores_i++;
       }
     }
    n=scores_i;
    int m,rank;
    j=n-1;//will store last index or the last rank
    scanf("%i", &m);
    int *alice = malloc(sizeof(int) * m);
    for (int alice_i = 0; alice_i < m; alice_i++) {
       scanf("%i",&alice[alice_i]);
    }
    for(i=0;i<m;i++)
    {
        while(j>=0 && alice[i]>scores[j])
            j--;
        if(j==-1)
            rank=1;
        else if(alice[i] == scores[j])
            rank=j+1;
        else if(alice[i] < scores[j])
            rank=j+2;
        printf("%d\n",rank);
    }
    return 0;
}


13....picking num


#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

int main() {
   int n,k,max = 0;
    cin>>n;
    int a[100]={0};
    for(int i = 0;i<n;i++){
        cin>>k;
        a[k]++;
    }
    for(int i = 0;i<n-1;i++){
        if(a[i]+a[i+1]> max) max = a[i]+a[i+1];
    }
    cout<<max;
    return 0;
}








14.sparse array



#include<bits/stdc++.h>
using namespace std;
int main(){

    map<string,int>m;
    int n,q;
    string str;
   
    cin >> n;
    for(int i = 0; i < n; i++){
        cin >> str;
        m[str]++;
    }
    cin >> q;
    for(int i = 0; i < q; i++){
        cin >> str;
        cout << m[str] << endl;
    }
    return 0;
}

15...fair ratio


#include <iostream>
#include <vector>
using namespace std;
int main(){
                 int t,n,k,dev;
                 cin >> t; 
for(int a0 = 0; a0 < t; a0++){
           cin >> n >> k;
           dev=n/k;
            vector<int> pos(n);
            if(k==0){      
                            for(int i=1;i<=n;i++)cout<<i<<" ";
            }
           else if ((k<=n/2)&&(n%k==0)&&(dev%2 ==0)){   
                         for(int i=0;i<n;i++){
                                   if((i/k)%2 == 0) pos[i] = i + k+1;  
                                  else   pos[i] = i - k+1;
                          }
                          for (int i = 0; i< n; i++)  cout << pos[i] << " ";
            }
            else   cout << "-1";
            cout <<endl;
}
return 0;
}
16........queen



import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int k = in.nextInt();
        int rQueen = in.nextInt();
        int cQueen = in.nextInt();

        //Row Column coordinates of the closes object in each direction
        int rRObstacle = -1;
        int cRObstacle = -1;
        int rBRObstacle = -1;
        int cBRObstacle = -1;
        int rBObstacle = -1;
        int cBObstacle = -1;
        int rBLObstacle = -1;
        int cBLObstacle = -1;
        int rLObstacle = -1;
        int cLObstacle = -1;
        int rTLObstacle = -1;
        int cTLObstacle = -1;
        int rTObstacle = -1;
        int cTObstacle = -1;
        int rTRObstacle = -1;
        int cTRObstacle = -1;

        //Total squares attacked by the queen
        int reachableSquares = 0;

        //Finds the closest object in each direction
        for(int a0 = 0; a0 < k; a0++){
            int rObstacle = in.nextInt();
            int cObstacle = in.nextInt();

            //Right
            if((cObstacle < cRObstacle || rRObstacle == -1) && cObstacle > cQueen && rObstacle == rQueen)
            {
                rRObstacle = rObstacle;
                cRObstacle = cObstacle;
            }

            //Bottom Right
            if(rQueen - rObstacle == cObstacle - cQueen && cObstacle > cQueen && rObstacle < rQueen 
               && ((rObstacle > rBRObstacle && cObstacle < cBRObstacle) || rBRObstacle == -1))
            {
                rBRObstacle = rObstacle;
                cBRObstacle = cObstacle;
            }

            //Bottom    
            if((rObstacle > rBObstacle || rBObstacle == -1) && rObstacle < rQueen && cObstacle == cQueen)
            {
                rBObstacle = rObstacle;
                cBObstacle = cObstacle;
            }

            //Bottom Left
            if(rQueen - rObstacle == cQueen - cObstacle && cObstacle < cQueen && rObstacle < rQueen 
               && ((rObstacle > rBLObstacle && cObstacle > cBLObstacle) || rBLObstacle == -1))
            {
                rBLObstacle = rObstacle;
                cBLObstacle = cObstacle;
            }

            //Left
            if((cObstacle > cLObstacle || rLObstacle == -1) && cObstacle < cQueen && rObstacle == rQueen)
            {
                rLObstacle = rObstacle;
                cLObstacle = cObstacle;
            }

            //Top Left
            if(cQueen - cObstacle == rObstacle - rQueen && cObstacle < cQueen && rObstacle > rQueen 
               && ((rObstacle < rTLObstacle && cObstacle > cTLObstacle) || rTLObstacle == -1))
            {
                rTLObstacle = rObstacle;
                cTLObstacle = cObstacle;
            }

            //Top
            if((rObstacle < rTObstacle || rTObstacle == -1) && rObstacle > rQueen && cObstacle == cQueen)
            {
                rTObstacle = rObstacle;
                cTObstacle = cObstacle;
            }

            //Top Right
            if(rObstacle - rQueen == cObstacle - cQueen && cObstacle > cQueen 
               && rObstacle > rQueen && ((rObstacle < rTRObstacle && cObstacle < cTRObstacle) || rTRObstacle == -1))
            {
                rTRObstacle = rObstacle;
                cTRObstacle = cObstacle;
            }

        }

        //Calculates the distance to the closest obstacle in each direction and adds it to reachableSquares
        //R B L T
        reachableSquares += (cRObstacle != -1) ? (cRObstacle - cQueen -1) : n - cQueen;     
        reachableSquares += (rBObstacle != -1) ? (rQueen - rBObstacle - 1) : rQueen - 1;   
        reachableSquares += (cLObstacle != -1) ? (cQueen - cLObstacle -1) : cQueen - 1;  
        reachableSquares += (rTObstacle != -1) ? (rTObstacle - rQueen - 1) : n - rQueen;

        //BR BL TL TR
        reachableSquares += (cBRObstacle != -1) ? (cBRObstacle - cQueen -1) : Math.min(n - cQueen, rQueen - 1); 
        reachableSquares += (rBLObstacle != -1) ? (cQueen - cBLObstacle - 1) : Math.min(cQueen - 1, rQueen - 1); 
        reachableSquares += (cTLObstacle != -1) ? (cQueen - cTLObstacle -1) : Math.min(cQueen - 1, n - rQueen);  
        reachableSquares += (rTRObstacle != -1) ? (cTRObstacle - cQueen - 1) : Math.min(n - cQueen, n - rQueen); 
        System.out.println(reachableSquares);
    }
}




17.encryption


#include <math.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>
#include <limits.h>
#include <stdbool.h>

int main()
{
   char a[100],b[100];
    int n,z,r,c;
    gets(a);
    int j,i;
     n=strlen(a);  
    //printf("\nn value %d",n);
    for(i=0,j=0;i<n;i++,j++)
     {            
            b[j]=a[i];           
    }   
    float p;
    p=sqrt(n);
    r=floor(p);   
    c=ceil(p);   
    if((n)>r*c)
       r=r+1;
    int k;
    char d[r][c];
    k=0;  
    for(i=0;i<r;i++)
     {
        for(j=0;j<c;j++)
         {
               if(k>=n)
                   d[i][j]=0;
            else
            {
                d[i][j]=b[k];            
                k++;
            }
        }        
    }       
    for(i=0;i<c;i++)
     {
        for(j=0;j<r;j++)
         {  
            if(d[j][i]!=0)
                printf("%c",d[j][i]);
        }        
        printf(" ");
    }
    return (0);

}




18...absulat manipulation



#include <iostream>
#include <vector>
using namespace std;
int main(){
                 int t,n,k,dev;
                 cin >> t; 
for(int a0 = 0; a0 < t; a0++){
           cin >> n >> k;
           dev=n/k;
            vector<int> pos(n);
            if(k==0){      
                            for(int i=1;i<=n;i++)cout<<i<<" ";
            }
           else if ((k<=n/2)&&(n%k==0)&&(dev%2 ==0)){   
                         for(int i=0;i<n;i++){
                                   if((i/k)%2 == 0) pos[i] = i + k+1;  
                                  else   pos[i] = i - k+1;
                          }
                          for (int i = 0; i< n; i++)  cout << pos[i] << " ";
            }
            else   cout << "-1";
            cout <<endl;
}
return 0;
}



19..almost sorted

#include <iostream>
#include <vector>
using namespace std;

int main() {
    int n,j=0,k=0,count=0,dn=0,up=0;  
    cin>>n;
    vector<int> s;
    int* A=new int[n+2]; 
    A[0]=0;                        
    for(int i=1 ; i<=n; i++){
        cin>>A[ i ];               
    }
    A[n+1]=1000001;       
    for(int i=1 ; i<=n-1 ; i++){        
         if(A[ i ]>A[ i+1] ){
                if(count==0){j=i ;count++ ;break ;    
        }    
     }}
    for(int i=n ; i>j-1 ;i--){
       if(A[i]<A[i-1]){              
               if(count==1){               
                          k=i ; dn++ ; s.push_back(i); 
               } 
                if(A[ i ]<A[ i+1] && count>1){
                         dn++ ; s.push_back(i);           
                } 
                count++;   
        }
            
         if(A[ i ]>A[ i+1 ] && A[ i ]>A[ i-1]){
                up++; s.push_back(i);        
         } 
    }

     if(count==0){cout<<"yes";}     /* if  no anomaly */
     else if(n==2){
            if(A[1]>A[2])cout<<"yes"<<endl<<"swap "<<1<<" "<<2;  
          
        }
    else if(A[ j ]<A[ k+1] && A[ k]>A[ j-1] && ((s.size()==4 &&s[0]-s[1]==1 && s[2]-s[3]==1)|| (s.size()==2 && s[0]-s[1]==1)) ) {
                cout<<"yes"<<endl<<"swap "<<j<<" "<<k; 
  
    }   
   else if(A[ j ]<A[k+1] && A[k]>A[ j-1]  &&  count==(k-j+1))
                cout<<"yes"<<endl<<"reverse "<<j<<" "<<k;

            
        else cout<<"no"; 
    
    return 0;
}


20..array manipulation



import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int m = in.nextInt();
        long[] offsets = new long[n + 1];
        for(int a0 = 0; a0 < m; a0++){
            int a = in.nextInt();
            int b = in.nextInt();
            int k = in.nextInt();
            offsets[a - 1] += k;
            offsets[b] -= k;
        }
        
        long max = offsets[0];
        for (int i = 1; i < n; ++i) {
            offsets[i] += offsets[i - 1];
            max = Math.max(offsets[i], max);
        }
        
        System.out.println(max);
        in.close();
    }
}
